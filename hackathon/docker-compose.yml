services:
  # Aplicação principal
  hackathon:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Server=db;Database=hack;User Id=hack;Password=Password23;Encrypt=False;TrustServerCertificate=True;
      - EventHub__ConnectionString=Endpoint=sb://eventhack.servicebus.windows.net/;SharedAccessKeyName=hack;SharedAccessKey=HeHeVaVqyVkntO2FnjQcs2Ilh/4MUDo4y+AEhKp8z+g=;EntityPath=simulacoes
    depends_on:
      db:
        condition: service_healthy # Agora vai funcionar, pois o db ficará saudável
    networks:
      - hackathon-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Serviço principal do Banco de Dados SQL Server
  db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=Password23  # Considere usar secrets para senhas em produção
      - MSSQL_PID=Developer
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - hackathon-network
    restart: unless-stopped
    # O Healthcheck verifica se o banco está pronto para aceitar conexões
    healthcheck:
      # AQUI ESTÁ A CORREÇÃO: Adicionado o parâmetro -C no final
      test: ["CMD", "/opt/mssql-tools/bin/sqlcmd", "-S", "localhost", "-U", "sa", "-P", "Password23", "-Q", "SELECT 1", "-C"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 10s

  # Serviço para configurar o banco de dados (rodar o script init.sql)
  db-setup:
    image: mcr.microsoft.com/mssql/server:2022-latest
    depends_on:
      db:
        condition: service_healthy # Só inicia quando o healthcheck do 'db' passar
    volumes:
      - ../banco/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - hackathon-network
    # Este comando tenta conectar e rodar o script. Ele usa '-C' para confiar no certificado.
    # O comando é executado apenas uma vez e o contêiner termina.
    command: >
      bash -c "
        echo 'Esperando o SQL Server ficar pronto...' &&
        sleep 10 &&
        echo 'Executando o script de inicialização...' &&
        /opt/mssql-tools/bin/sqlcmd -S db -U sa -P Password23 -d master -i /docker-entrypoint-initdb.d/init.sql -C
      "

  # Azure Storage Emulator (opcional para desenvolvimento local)
  azurite:
    image: mcr.microsoft.com/azure-storage/azurite:latest
    ports:
      - "10000:10000"
      - "10001:10001"
      - "10002:10002"
    networks:
      - hackathon-network
    restart: unless-stopped

volumes:
  sqlserver_data:

networks:
  hackathon-network:
    driver: bridge